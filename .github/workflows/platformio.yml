name: PlatformIO CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Build
        run: pio run

      - name: Add Build Status Badge
        continue-on-error: true
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 46292c13ab8c70e68aa9619cad1d9560
          filename: esp32-homekit-SmartRoom-build.json
          label: "Build Status"
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}
          namedLogo: cplusplusbuilder

      - name: Check OTA Size
        id: ota_check
        continue-on-error: true
        run: |
          # Default value in bytes ~ 1.25MB (should only be used if nothing is found)
          DEFAULT_MAX_OTA_SIZE=1310720

          # Retrieve partition file name from platformio.ini
          PARTITION_LINE=$(grep "board_build.partitions" platformio.ini || true)
          if [ -z "$PARTITION_LINE" ]; then
              echo "No board_build.partitions found in platformio.ini."
              MAX_OTA_SIZE=$DEFAULT_MAX_OTA_SIZE
          else
              PARTITION_FILENAME=$(echo "$PARTITION_LINE" | cut -d '=' -f2 | tr -d ' ')
              echo "Partition filename from platformio.ini: $PARTITION_FILENAME"
              
              # Locate locally or download it from Espressif GitHub
              PARTITION_FILE=$(find . -type f -name "$PARTITION_FILENAME" | head -n 1)
              if [ -z "$PARTITION_FILE" ]; then
                  echo "Partition file $PARTITION_FILENAME not found locally. Downloading..."
                  curl -o "$PARTITION_FILENAME" https://raw.githubusercontent.com/espressif/arduino-esp32/master/tools/partitions/$PARTITION_FILENAME
                  if [ ! -f "$PARTITION_FILENAME" ]; then
                      echo "Unable to download partition file; using default max OTA size."
                      MAX_OTA_SIZE=$DEFAULT_MAX_OTA_SIZE
                  else
                      PARTITION_FILE="$PARTITION_FILENAME"
                      echo "Downloaded partition file: $PARTITION_FILE"
                  fi
              fi
              
              if [ -n "$PARTITION_FILE" ]; then
                  # Look for the "app0" partition entry (which corresponds to ota0)
                  PARTITION_ENTRY=$(awk -F'[ \t]+' '$1=="app0" {print $0}' "$PARTITION_FILE")
                  if [ -z "$PARTITION_ENTRY" ]; then
                      echo "app0 partition not found; trying app1..."
                      PARTITION_ENTRY=$(awk -F'[ \t]+' '$1=="app1" {print $0}' "$PARTITION_FILE")
                  fi
                  
                  if [ -z "$PARTITION_ENTRY" ]; then
                      echo "No OTA partition (app0/app1) found in $PARTITION_FILE; using default max OTA size."
                      MAX_OTA_SIZE=$DEFAULT_MAX_OTA_SIZE
                  else
                      echo "Found partition entry: $PARTITION_ENTRY"
                      # Extract the partition size from the 5th column
                      SIZE_HEX=$(echo "$PARTITION_ENTRY" | awk '{print $5}')
                      SIZE_HEX=$(echo "$SIZE_HEX" | tr -d '[:space:]')
                      echo "Extracted OTA partition size (hex): $SIZE_HEX"
                      if [[ $SIZE_HEX == 0x* ]]; then
                          MAX_OTA_SIZE=$(printf "%d" "$SIZE_HEX")
                      else
                          MAX_OTA_SIZE="$SIZE_HEX"
                      fi
                  fi
              fi
          fi

          echo "Maximum OTA size: $MAX_OTA_SIZE bytes"
          MB_SIZE=$(echo "scale=2; $MAX_OTA_SIZE/1048576" | bc)
          echo "Maximum OTA size in MB: ${MB_SIZE} MB"

          # Locate and check the firmware binary
          FIRMWARE_PATH=".pio/build/esp32doit-devkit-v1/firmware.bin"
          if [ ! -f "$FIRMWARE_PATH" ]; then
              echo "Error: Firmware file not found at $FIRMWARE_PATH"
              echo "OTA_STATUS=Build failed - no firmware" >> $GITHUB_ENV
              echo "check_failed=true" >> $GITHUB_ENV
              exit 1
          fi

          BINARY_SIZE=$(stat -c%s "$FIRMWARE_PATH")
          echo "Firmware binary size: $BINARY_SIZE bytes"

          if [ "$BINARY_SIZE" -gt "$MAX_OTA_SIZE" ]; then
              echo "OTA_STATUS=exceeded ($BINARY_SIZE bytes)" >> $GITHUB_ENV
              echo "check_failed=true" >> $GITHUB_ENV
              exit 1
          else
              PERCENT_USED=$((BINARY_SIZE * 100 / MAX_OTA_SIZE))
              echo "OTA_STATUS=ready ($PERCENT_USED% used)" >> $GITHUB_ENV
              echo "check_failed=false" >> $GITHUB_ENV
          fi

      - name: Add OTA Status Badge
        if: always()
        continue-on-error: true
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 46292c13ab8c70e68aa9619cad1d9560
          filename: esp32-homekit-ota.json
          label: "OTA Uploads Status"
          message: ${{ env.OTA_STATUS || 'Failed to check size' }}
          color: >-
            ${{ 
              env.check_failed == 'true' && 'critical' ||
              env.OTA_STATUS != '' && 'success' ||
              'critical'
            }}
          namedLogo: rocket
